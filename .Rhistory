library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
data
data <- readRDS("data/raw/input3.rds")
data
data$timestamp
mt_time(data)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
data
sdk <- "MoveApps R SDK"
year <- 2006
range(data$timestamp)
logger.info(paste("Welcome to the", sdk))
(any(lubridate::year(mt_time(data)) == year))
data[lubridate::year(mt_time(data)) == year]
mt_time(data)
year(mt_time(data))
lubridate::year(mt_time(data))
lubridate::year(mt_time(data)) == year
data[lubridate::year(mt_time(data)) == year,]
dim(data[lubridate::year(mt_time(data)) == year,])
dim(data)
lenth(which(lubridate::year(mt_time(data)) == year))
length(which(lubridate::year(mt_time(data)) == year))
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
a <- "test"
write.csv(a,file="./test.csv")
t <- read.csv("./test.csv")
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
data <- readRDS("input2.rds")
data <- readRDS("./data/raw/input2.rds")
range(data$timestamp)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
test_data <- test_data("input3.rds")
source(file.path("..", "..", "src", "common", "logger.R"))
source(file.path( "src", "common", "logger.R"))
source(file.path("src", "io", "app_files.R"))
source(file.path("src", "io", "io_handler.R"))
Sys.setenv("LOCAL_APP_FILES_DIR" = "data/local_app_files")
# the system under test (sut)
source(file.path("./RFunction.R"))
library(testthat)
test_data <- test_data("input3.rds")
library(testthat)
help(test_data)
test_data <- readRDS("input3.rds")
test_data <- function(test_file) {
test_data_root_dir <- test_path("data")
readRDS(file = file.path(test_data_root_dir, test_file))
}
test_data <- test_data("input3.rds")
test_that("happy path", {
actual <- rFunction(data = test_data, sdk = "unit test", year = 2005)
expect_equal(unique(lubridate::year(actual@timestamps)), 2005)
})
test_that("year not included", {
actual <- rFunction(data = test_data, sdk = "unit test", year = 2023)
expect_null(actual)
})
test_that("happy path", {
actual <- rFunction(data = test_data, sdk = "unit test", year = 2005)
expect_equal(unique(lubridate::year(mt_time(actual))), 2005)
})
actual <- rFunction(data = test_data, sdk = "unit test", year = 2005)
library(move2)
actual <- rFunction(data = test_data, sdk = "unit test", year = 2005)
# the system under test (sut)
source(file.path("./RFunction.R"))
rFunction
source("./src/io/sdk.R")
source("../../src/io/sdk.R")
file.path("..", "..", "src", "common", "logger.R")
source("src/io/sdk.R")
getwd()
source("./src/io/sdk.R")
source("src/io/sdk.R")
source("src/io/rds.R")
source("../../src/io/sdk.R")
test_data <- function(test_file) {
test_data_root_dir <- test_path("data")
readRdsInput(file = file.path(test_data_root_dir, test_file))
}
test_data <- test_data("input3.rds")
test_data <- test_data("input3.rds")
test_data <- test_data("data/raw/input3.rds")
test_file <- "input3.rds"
file.path(test_data_root_dir, test_file)
test_data_root_dir <- test_path("data")
library(testthat)
help(test_path)
test_data_root_dir <- test_path("data")
source("../../src/io/sdk.R")
source("src/io/sdk.R")
source(file.path("..", "..", "src", "common", "logger.R"))
getwd()
test_data <- test_data("input3_move2.rds") #file must be move2!
library('move2')
getwd()
t1 <- readRDS("tests/testthat/data/input3_move1.rds")
readRdsInput(t1)
readRdsInput("tests/testthat/data/input3_move1.rds")
class(t1)
t2 <- readRDS("tests/testthat/data/input3_move1.rds")
class(t2)
t2 <- readRDS("tests/testthat/data/input3_move2.rds")
class(t2)
is(class(t2),"move2")
class(t2)=="move2"
is.move2(t2)
help(package="move2")
mt_is_move2(t2)
help(expect_true)
help(test_data)
library(testthat)
help(test_data)
library('move2')
test_data <- test_data("input3_move2.rds") #file must be move2!
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
warnings()
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
library(dotenv)
# You can control your local app development via environment variables.
# You can define things like input-data, app-configuration etc.
# Per default your environment is defined in `/.env`
load_dot_env()
# provide common stuff
source("src/common/logger.R")
source("src/common/runtime_configuration.R")
clearRecentOutput()
# This will parse a JSON file containing the concrete configuration of
# the app run. Per default the file `/app-configuration.json` will be parsed.
args <- configuration()
# Lets simulate running your app on MoveApps
source("src/moveapps.R")
simulateMoveAppsRun(args)
